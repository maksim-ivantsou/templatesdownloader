// First, apply the publishing plugin
plugins {
    id "com.gradle.plugin-publish" version "0.12.0"
    id "java-gradle-plugin"
    id 'java'
    id 'maven'
    // Apply other plugins here, e.g. the kotlin plugin for a plugin written in Kotlin
    // or the groovy plugin if the plugin uses Groovy
}

// If your plugin has any external java dependencies, Gradle will attempt to
// download them from JCenter for anyone using the plugins DSL
// so you should probably use JCenter for dependency resolution in your own
// project.
repositories {
    jcenter()
    mavenLocal()
}

// Unless overridden in the pluginBundle config DSL, the project version will
// be used as your plugin version when publishing
version = "1.0"
group = "com.gmail.maxcs1990"

// Use java-gradle-plugin to generate plugin descriptors and specify plugin ids
gradlePlugin {
    plugins {
        ClevertecDownloadPlugin {
            id = 'com.gmail.maxcs1990'
            implementationClass = 'ru.clevertec.MyPlugin'
        }
    }
}

// The configuration example below shows the minimum required properties
// configured to publish your plugin to the plugin portal
pluginBundle {
    website = 'https://clevertec.ru/'
    vcsUrl = 'https://github.com/maksim-ivantsou/clevertec-hw-plugin/'
    description = 'Plugin for loading pdf templates resources into the project'
    tags = ['clevertec', 'templates-downloader']

    plugins {
        ClevertecDownloadPlugin {
            // id is captured from java-gradle-plugin configuration
            displayName = 'com.gmail.maxcs1990.templatesdownloader'
        }
    }
}


uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: mavenLocal().url)
        }
    }
}